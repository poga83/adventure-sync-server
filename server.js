const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

app.use(cors());
app.use(express.json());

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
const users = new Map();
const privateChats = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
const groupMessages = []; // –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
let meetupPoint = null; // –¢–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ —Å–±–æ—Ä–∞
const messageDeliveryStatus = new Map(); // –°—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–∫–∏ —Å–±–æ—Ä–∞
function saveMeetupPoint(point, setBy) {
    meetupPoint = {
        coordinates: point.coordinates,
        setBy: setBy,
        timestamp: new Date().toISOString(),
        description: point.description || '–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞'
    };
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–π —Ç–æ—á–∫–µ —Å–±–æ—Ä–∞
    io.emit('meetupPointUpdate', meetupPoint);
    console.log(`–¢–æ—á–∫–∞ —Å–±–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${setBy}:`, meetupPoint);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏ –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
function calculateTravelTime(distance, transportType) {
    const speeds = {
        'üèçÔ∏è –ú–æ—Ç–æ': 90, // –∫–º/—á
        'üö≤ –í–µ–ª–æ': 15,
        'üö∂ –ü–µ—à–∫–æ–¥—Ä–∞–ª–∏': 5,
        'üé§ –ò–¥—É –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç': 4,
        '‚òï –ß–∞–∏ –ø–∏–Ω–∞—é': 300,
        'üü¢ –°–≤–æ–±–æ–¥–µ–Ω': 50,
        'üî¥ –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å': 40
    };
    
    const speed = speeds[transportType] || 40;
    return Math.round((distance / speed) * 60); // –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
function getChatHistory(userId1, userId2) {
    const chatKey = [userId1, userId2].sort().join('-');
    return privateChats.get(chatKey) || [];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
function savePrivateMessage(fromId, toId, message) {
    const chatKey = [fromId, toId].sort().join('-');
    if (!privateChats.has(chatKey)) {
        privateChats.set(chatKey, []);
    }
    
    const messageData = {
        id: Date.now() + Math.random(),
        from: fromId,
        to: toId,
        text: message,
        timestamp: new Date().toISOString(),
        delivered: false,
        read: false
    };
    
    privateChats.get(chatKey).push(messageData);
    return messageData;
}

io.on('connection', (socket) => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on('register', (userData) => {
        users.set(socket.id, {
            id: socket.id,
            name: userData.name,
            status: userData.status,
            position: userData.position,
            lastSeen: new Date().toISOString()
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É —Å–±–æ—Ä–∞ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (meetupPoint) {
            socket.emit('meetupPointUpdate', meetupPoint);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        socket.emit('groupChatHistory', groupMessages.slice(-50)); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö
        io.emit('users', Array.from(users.values()));
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    socket.on('position', (coords) => {
        const user = users.get(socket.id);
        if (user) {
            user.position = coords;
            user.lastSeen = new Date().toISOString();
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞ —Å–±–æ—Ä–∞, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏
            if (meetupPoint && coords) {
                const distance = calculateDistance(coords, meetupPoint.coordinates);
                const travelTime = calculateTravelTime(distance, user.status);
                
                socket.emit('travelTimeUpdate', {
                    distance: distance,
                    time: travelTime,
                    transportType: user.status
                });
            }
            
            io.emit('users', Array.from(users.values()));
        }
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–∫–∏ —Å–±–æ—Ä–∞
    socket.on('setMeetupPoint', (pointData) => {
        const user = users.get(socket.id);
        if (user) {
            saveMeetupPoint(pointData, user.name);
        }
    });

    // –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('chat', (message) => {
        const messageData = {
            id: Date.now() + Math.random(),
            text: message.text,
            author: message.author,
            timestamp: message.timestamp,
            deliveredTo: []
        };
        
        groupMessages.push(messageData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users.forEach((user, userId) => {
            if (userId !== socket.id) {
                io.to(userId).emit('chat', messageData);
                messageData.deliveredTo.push(userId);
            }
        });
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ—Ä—É
        socket.emit('messageDelivered', {
            messageId: messageData.id,
            deliveredCount: messageData.deliveredTo.length
        });
    });

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('privateMessage', (data) => {
        const messageData = savePrivateMessage(socket.id, data.to, data.text);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        io.to(data.to).emit('privateMessage', {
            id: messageData.id,
            from: socket.id,
            text: data.text,
            timestamp: messageData.timestamp
        });
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        const fromUser = users.get(socket.id);
        io.to(data.to).emit('showNotification', {
            title: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${fromUser ? fromUser.name : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}`,
            body: data.text,
            from: socket.id
        });
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        socket.emit('messageDelivered', {
            messageId: messageData.id,
            to: data.to
        });
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('messageRead', (data) => {
        const chatKey = [socket.id, data.from].sort().join('-');
        const chatHistory = privateChats.get(chatKey);
        
        if (chatHistory) {
            const message = chatHistory.find(msg => msg.id === data.messageId);
            if (message) {
                message.read = true;
                message.readAt = new Date().toISOString();
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
                io.to(data.from).emit('messageReadConfirmation', {
                    messageId: data.messageId,
                    readBy: socket.id,
                    readAt: message.readAt
                });
            }
        }
    });

    // –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    socket.on('getChatHistory', (data) => {
        const history = getChatHistory(socket.id, data.withUser);
        socket.emit('chatHistory', {
            withUser: data.withUser,
            messages: history
        });
    });

    socket.on('disconnect', () => {
        users.delete(socket.id);
        io.emit('users', Array.from(users.values()));
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    });
});

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
function calculateDistance(coords1, coords2) {
    const R = 6371; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    const dLat = (coords2[0] - coords1[0]) * Math.PI / 180;
    const dLon = (coords2[1] - coords1[1]) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(coords1[0] * Math.PI / 180) * Math.cos(coords2[0] * Math.PI / 180) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
}

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
