const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const UserManager = require('./modules/UserManager');
const ChatManager = require('./modules/ChatManager');

const app = express();
const server = http.createServer(app);

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS –¥–ª—è Socket.IO
const io = socketIo(server, {
    cors: {
        origin: ["http://localhost:3000", "http://127.0.0.1:3000", "http://localhost:8080", "http://127.0.0.1:8080"],
        methods: ["GET", "POST"],
        credentials: true,
        allowedHeaders: ["Content-Type"]
    },
    transports: ['websocket', 'polling'],
    allowEIO3: true,
    pingTimeout: 60000,
    pingInterval: 25000
});

// Middleware
app.use(cors({
    origin: ["http://localhost:3000", "http://127.0.0.1:3000", "http://localhost:8080", "http://127.0.0.1:8080"],
    credentials: true
}));
app.use(express.json());
app.use(express.static('public'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
const userManager = new UserManager();
const chatManager = new ChatManager();

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
io.on('connection', (socket) => {
    console.log(`‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on('userConnected', (userData) => {
        try {
            console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:`, userData);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userManager.addUser(socket.id, userData);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
            socket.emit('users', userManager.getAllUsers());
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            socket.broadcast.emit('userConnected', userData);
            
            console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: ${userManager.getUserCount()}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏' });
        }
    });
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    socket.on('getUsers', () => {
        socket.emit('users', userManager.getAllUsers());
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on('updateStatus', (status) => {
        try {
            const user = userManager.updateUserStatus(socket.id, status);
            if (user) {
                io.emit('userStatusChanged', {
                    userId: user.id,
                    status: status
                });
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
        }
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on('updatePosition', (position) => {
        try {
            const user = userManager.updateUserPosition(socket.id, position);
            if (user) {
                socket.broadcast.emit('userPositionChanged', {
                    userId: user.id,
                    position: position
                });
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏:', error);
        }
    });
    
    // –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('groupMessage', (message) => {
        try {
            const fullMessage = {
                ...message,
                id: Date.now(),
                timestamp: new Date().toISOString()
            };
            
            chatManager.addGroupMessage(fullMessage);
            io.emit('groupMessage', fullMessage);
            
            console.log(`üí¨ –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.senderName}: ${message.content}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    });
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('privateMessage', (data) => {
        try {
            const message = {
                ...data.content,
                id: Date.now(),
                timestamp: new Date().toISOString()
            };
            
            chatManager.addPrivateMessage(data.to, message);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            const targetUser = userManager.getUserByUserId(data.to);
            if (targetUser) {
                io.to(targetUser.socketId).emit('privateMessage', message);
            }
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            socket.emit('privateMessage', message);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    });
    
    // –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
    socket.on('getGroupChatHistory', () => {
        socket.emit('groupChatHistory', chatManager.getGroupMessages());
    });
    
    // –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    socket.on('getPrivateChatHistory', (userId) => {
        const messages = chatManager.getPrivateMessages(userId);
        socket.emit('privateChatHistory', {
            userId: userId,
            messages: messages
        });
    });
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', (reason) => {
        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}, –ø—Ä–∏—á–∏–Ω–∞: ${reason}`);
        
        try {
            const user = userManager.removeUser(socket.id);
            if (user) {
                socket.broadcast.emit('userDisconnected', user.id);
                console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: ${userManager.getUserCount()}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
    socket.on('error', (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞ ${socket.id}:`, error);
    });
});

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–≤–∏–∂–∫–∞
io.engine.on("connection_error", (err) => {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–≤–∏–∂–∫–∞:', {
        req: err.req?.url,
        code: err.code,
        message: err.message,
        context: err.context
    });
});

// REST API endpoints –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
app.get('/api/status', (req, res) => {
    res.json({
        status: 'running',
        users: userManager.getUserCount(),
        uptime: process.uptime(),
        timestamp: new Date().toISOString()
    });
});

app.get('/api/users', (req, res) => {
    res.json(userManager.getAllUsers());
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.get('/', (req, res) => {
    res.send(`
        <html>
        <head><title>Adventure Sync Server</title></head>
        <body style="font-family: Arial; padding: 20px; background: #2C2C2C; color: #E0E0E0;">
            <h1>üåç Adventure Sync Server</h1>
            <p>–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>
            <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: <span id="userCount">${userManager.getUserCount()}</span></p>
            <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime())} —Å–µ–∫—É–Ω–¥</p>
            <hr>
            <h3>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</h3>
            <p>‚Ä¢ <a href="/api/status" style="color: #64B5F6;">–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</a></p>
            <p>‚Ä¢ <a href="/api/users" style="color: #64B5F6;">–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</a></p>
            <script>
                setInterval(() => {
                    fetch('/api/status')
                        .then(r => r.json())
                        .then(data => {
                            document.getElementById('userCount').textContent = data.users;
                        });
                }, 5000);
            </script>
        </body>
        </html>
    `);
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`
    üöÄ Adventure Sync Server –∑–∞–ø—É—â–µ–Ω!
    üì° –ü–æ—Ä—Ç: ${PORT}
    üåê URL: http://localhost:${PORT}
    üîå Socket.IO –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º
    üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: ${userManager.getUserCount()}
    `);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});
